{"version":3,"sources":["components/Search.js","components/GridSummary.js","components/Body.js","components/Footer.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["Search","state","result","search","handleChange","e","setState","target","id","value","handleSubmit","preventDefault","axios","get","process","then","res","data","results","props","addNewResult","total","document","querySelector","alert","className","onSubmit","this","type","placeholder","onChange","Component","connect","dispatch","GridSummary","download","src","urls","small","alt","onClick","regular","full","href","Body","url","method","responseType","response","window","URL","createObjectURL","Blob","link","createElement","setAttribute","body","appendChild","click","addResult","map","key","Footer","role","aria-label","App","Boolean","location","hostname","match","initState","rootReducer","action","newResult","store","createStore","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.986a58d1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios'\r\nimport { connect } from 'react-redux'\r\n\r\nclass Search extends Component {\r\n  state = {\r\n    result: null,\r\n    search: null,\r\n  };\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value,\r\n    });\r\n  };\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    axios\r\n      .get(\r\n        `https://api.unsplash.com/search/photos?page=1&per_page=15&query=computer&client_id=${process.env.REACT_APP_UNPLASH_API}`\r\n      )\r\n      .then((res) => {\r\n        // console.log(res.data.results);\r\n        this.setState({\r\n          result: res.data.results\r\n        })\r\n      });   \r\n    this.props.addNewResult(null);\r\n    if(this.state.search){\r\n      axios\r\n        .get(\r\n          `https://api.unsplash.com/search/photos?page=1&per_page=15&query=${this.state.search}&client_id=${process.env.REACT_APP_UNPLASH_API}`\r\n        )\r\n        .then((res) => {\r\n          // console.log(res);\r\n          if(res.data.total === 0){\r\n            document.querySelector(\"#search\").value = \"\";\r\n            alert(\"Enter Valid name\");\r\n            this.props.addNewResult(this.state.result);\r\n            \r\n          } else {\r\n            this.props.addNewResult(res.data.results)\r\n          }\r\n        });\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <header>\r\n        <div className=\"container\">\r\n          <form onSubmit={this.handleSubmit}>\r\n            <input\r\n              id=\"search\"\r\n              type=\"text\"\r\n              className=\"right\"\r\n              placeholder=\"Search photo\"\r\n              onChange={this.handleChange}\r\n            />\r\n            <button\r\n              type=\"submit\"\r\n              className=\"purple center z-depth-1 white-text search-btn\"\r\n            >\r\n              Search\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addNewResult: (result) => {\r\n      dispatch({\r\n        type: \"ADD_SEARCH_RESULT\",\r\n        result: result,\r\n      });\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Search);","import React from \"react\";\r\n// import Image from \"../cat.jpg\";\r\n\r\nconst GridSummary = ({ result, download }) => {\r\n  return (\r\n    <div className=\"col s12 m6 l4 center grid-content\">\r\n      <img src={result.urls.small} alt=\"\" className=\"center\" />\r\n      <div className=\"download-link\">\r\n        <p className=\"download-content\">Download:</p>\r\n        <div className=\"download\">\r\n          <button\r\n            onClick={() => {\r\n              download(result.urls.small, result.id);\r\n            }}\r\n            className=\"download-btn waves-effect z-depth-2 purple-text white lighten-2\"\r\n          >\r\n            Small\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              download(result.urls.regular, result.id);\r\n            }}\r\n            className=\"download-btn waves-effect z-depth-2 purple-text white lighten-2\"\r\n          >\r\n            Medium\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              download(result.urls.full, result.id);\r\n            }}\r\n            className=\"download-btn waves-effect z-depth-2 purple-text white lighten-2\"\r\n          >\r\n            Large\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <a\r\n        href={result.urls.full}\r\n        className=\"btn white waves-effect lighten-2 purple-text\"\r\n      >\r\n        View Full Size\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GridSummary;\r\n","import React, { Component } from 'react'\r\nimport GridSummary from './GridSummary'\r\nimport axios from 'axios'\r\nimport { connect } from 'react-redux'\r\n\r\nclass Body extends Component {\r\n  componentDidMount() {\r\n    axios\r\n      .get(\r\n        `https://api.unsplash.com/search/photos?page=1&per_page=15&query=computer&client_id=${process.env.REACT_APP_UNPLASH_API}`\r\n      )\r\n      .then((res) => {\r\n        // console.log(res.data.results);\r\n        this.props.addResult(res.data.results);       \r\n        \r\n      });\r\n  }\r\n  download = (url, id) => {\r\n    // console.log(url);\r\n    axios({\r\n      url: url, //your url\r\n      method: \"GET\",\r\n      responseType: \"blob\", // important\r\n    }).then((response) => {\r\n      const url = window.URL.createObjectURL(new Blob([response.data]));\r\n      const link = document.createElement(\"a\");\r\n      link.href = url;\r\n      link.setAttribute(\"download\", id + \".jpg\"); //or any other extension\r\n      document.body.appendChild(link);\r\n      link.click();\r\n    });\r\n  }\r\n  render() {\r\n    // console.log(this.props.result);\r\n\r\n    let data = this.props.result ? (\r\n      this.props.result.map(result => {\r\n        return <GridSummary result={result} download={this.download} key={result.id} />\r\n      })\r\n    ) : (\r\n      <div className=\"content\">\r\n        <h4>Loading....<br/>Images</h4>\r\n      </div>\r\n    );\r\n    \r\n    return (\r\n      <div>\r\n        <div className=\"row center container body-container\">{data}</div>\r\n        {/* <div className=\"container center\">\r\n          <button onClick={this.addResult} className=\"btn-floating add-button purple lighten-2 z-depth-1 pulse center\">\r\n            <span role=\"img\" aria-label=\"love\">\r\n              ➕\r\n            </span>\r\n          </button>\r\n        </div> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    result: state.result\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addResult: (result) => {\r\n      dispatch({\r\n        type: 'ADD_RESULT',\r\n        result: result,\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Body)","import React, { Component } from 'react'\r\n\r\nclass Footer extends Component{\r\n    render(){\r\n        return (\r\n            \r\n          <footer className=\"purple center\">\r\n            <div className=\"footer-copyright\">\r\n              <div className=\"container\">\r\n                  Made with\r\n                  <span role=\"img\" aria-label=\"love\">\r\n                    ❤️\r\n                  </span>\r\n                  by <a href=\"https://abhijeetkwh.me/\">\r\n                     Abhijeet.R.Kushwaha\r\n                  </a>\r\n                <br />\r\n                &copy; All Rights Reserved\r\n              </div>\r\n            </div>\r\n          </footer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer","import React from 'react';\nimport Search from './components/Search';\nimport Body from './components/Body';\nimport './App.css';\nimport Footer from './components/Footer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Search />\n      <Body />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = {\r\n    result: null,\r\n}\r\n\r\nconst rootReducer = (state = initState, action) => {\r\n    if (action.type === \"ADD_RESULT\") {\r\n        // console.log(action.result);\r\n        const newResult = action.result;\r\n        return {\r\n            ...state,\r\n            result: newResult\r\n        }\r\n    }\r\n    if (action.type === \"ADD_SEARCH_RESULT\") {\r\n    //   console.log(action.result);\r\n      const newResult = action.result;\r\n      return {\r\n        ...state,\r\n        result: newResult,\r\n      };\r\n    }\r\n     return state;\r\n}\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux'\nimport rootReducer from './reducers/rootReducer'\n\nconst store = createStore(rootReducer)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}